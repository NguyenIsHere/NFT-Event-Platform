syntax = "proto3";

package seatmap;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// ----- Chính: SeatMap Message -----
message SeatMap {
  string id = 1;
  string event_id = 2;
  StageConfig stage_config = 3;
  repeated Section sections = 4;
}

message StageConfig {
  Dimensions dimensions = 1;
  Position position = 2;
  string shape = 3;
}

message Section {
  string id = 1;
  string name = 2;
  string type = 3;
  Position position = 4;
  Dimensions dimensions = 5;
  int32 rows = 6;
  int32 seats_per_row = 7;
  string color = 8;
  string price_category_id = 9;
  string price_description = 10;
  // ✅ THÊM: Field để lưu config ghế linh hoạt
  string rows_config_input = 11;  // e.g., "1:10,2:8,3:12" (start:count format)
}

message Position {
  int32 x = 1;
  int32 y = 2;
  int32 rotation = 3;
}

message Dimensions {
  int32 width = 1;
  int32 height = 2;
}

// ----- SeatMapService -----
service SeatMapService {
  rpc CreateSeatMap(CreateSeatMapRequest) returns (SeatMapResponse) {
    option (google.api.http) = {
      post: "/v1/events/{event_id}/seatmap"
      body: "*"
    };
  }

  rpc GetSeatMap(GetSeatMapRequest) returns (SeatMapResponse) {
    option (google.api.http) = {
      get: "/v1/seatmaps/{seat_map_id}"
    };
  }
  
  rpc GetSeatMapByEvent(GetSeatMapByEventRequest) returns (SeatMapResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}/seatmap"
    };
  }

  rpc UpdateSeatMap(UpdateSeatMapRequest) returns (SeatMapResponse) {
    option (google.api.http) = {
      put: "/v1/seatmaps/{seat_map_id}"
      body: "*"
    };
  }

  rpc DeleteSeatMap(DeleteSeatMapRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/seatmaps/{seat_map_id}"
    };
  }

  rpc ListSeatMaps(ListSeatMapsRequest) returns (ListSeatMapsResponse) {
     option (google.api.http) = {
       get: "/v1/seatmaps"
     };
  }
}

// ----- Request/Response Messages -----
message CreateSeatMapRequest {
  string event_id = 1;
  StageConfig stage_config = 2;
  repeated Section sections = 3;
}

message SeatMapResponse {
  SeatMap seat_map = 1;
}

message GetSeatMapRequest {
  string seat_map_id = 1;
}

message GetSeatMapByEventRequest {
  string event_id = 1;
}

message UpdateSeatMapRequest {
  string seat_map_id = 1;
  string event_id_to_verify = 2;
  StageConfig stage_config = 3;
  repeated Section sections = 4;
}

message DeleteSeatMapRequest {
  string seat_map_id = 1;
}

message ListSeatMapsRequest {
  string event_id = 1;
}

message ListSeatMapsResponse {
  repeated SeatMap seat_maps = 1;
}