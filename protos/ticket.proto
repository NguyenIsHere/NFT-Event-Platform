syntax = "proto3";

package ticket;

import "google/api/annotations.proto";

// _____ TicketTypeService _ PATHS KHÁC NHAU ĐỂ TRÁNH CONFLICT _____
service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      post: "/v1/ticket-types/create"  // THAY ĐỔI PATH
      body: "*"
    };
  }
  
  rpc UpdateTicketType(UpdateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      put: '/v1/ticket-types/{ticket_type_id}'
      body: "*"
    };
  }
  
  rpc GetTicketType(GetTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      get: "/v1/ticket-types/{ticket_type_id}"
    };
  }
  
  rpc ListTicketTypesByEvent(ListTicketTypesByEventRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-event/{event_id}"  // THAY ĐỔI PATH
    };
  }
  
  rpc ListTicketTypesBySession(ListTicketTypesBySessionRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-session/{event_id}/{session_id}"  // THAY ĐỔI PATH
    };
  }
}

// _____ TicketService _____
service TicketService {
  rpc InitiatePurchase(InitiatePurchaseRequest) returns (InitiatePurchaseResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/initiate-purchase"
      body: "*"
    };
  }

  rpc ConfirmPaymentAndRequestMint(ConfirmPaymentAndRequestMintRequest) returns (ConfirmPaymentAndRequestMintResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/confirm-payment-mint"
      body: "*"
    };
  }

    rpc ListAllTickets(ListAllTicketsRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/all"
    };
  }

  rpc GetTicket(GetTicketRequest) returns (Ticket) {
    option (google.api.http) = {
      get: "/v1/tickets/{ticket_id}"
    };
  }
  
  rpc ListTicketsByEvent(ListTicketsByEventRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-event/{event_id}"  // THAY ĐỔI PATH
    };
  }
  
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-owner/{owner_address}"  // THAY ĐỔI PATH
    };
  }

  rpc GenerateQRCode (GenerateQRCodeRequest) returns (GenerateQRCodeResponse) {
        option (google.api.http) = {
            post: "/v1/tickets/{ticket_id}/qr-code"
        };
    }
    
  rpc CheckIn (CheckInRequest) returns (CheckInResponse) {
      option (google.api.http) = {
          post: "/v1/tickets/check-in"
          body: "*"
      };
  }

  rpc GetEventDashboard(EventDashboardRequest) returns (EventDashboardResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}/analytics/dashboard"
    };
  }
  
  rpc GetOrganizerStats(OrganizerStatsRequest) returns (OrganizerStatsResponse) {
    option (google.api.http) = {
      get: "/v1/organizers/{organizer_id}/analytics"
    };
  }
  
  rpc GetCheckinAnalytics(CheckinAnalyticsRequest) returns (CheckinAnalyticsResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}/analytics/checkin"
    };
  }
}

// THÊM Settlement Service
service SettlementService {
  rpc GetEventSettlementSummary(GetEventSettlementSummaryRequest) returns (GetEventSettlementSummaryResponse) {
    option (google.api.http) = {
      get: "/v1/settlements/events/{event_id}/summary"
    };
  }

  rpc ProcessEventSettlement(ProcessEventSettlementRequest) returns (ProcessEventSettlementResponse) {
    option (google.api.http) = {
      post: "/v1/settlements/events/{event_id}/process"
      body: "*"
    };
  }

  rpc ListPlatformTransactions(ListPlatformTransactionsRequest) returns (ListPlatformTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/settlements/transactions"
    };
  }
}

// Settlement Messages
message GetEventSettlementSummaryRequest {
  string event_id = 1;
}

message SettlementSummary {
  int32 count = 1;
  string total_amount_wei = 2;
  string total_platform_fee_wei = 3;
  string total_organizer_amount_wei = 4;
}

message GetEventSettlementSummaryResponse {
  string event_id = 1;
  SettlementSummary received_summary = 2;
  SettlementSummary settled_summary = 3;
}

message ProcessEventSettlementRequest {
  string event_id = 1;
  string settlement_transaction_hash = 2;
}

message ProcessEventSettlementResponse {
  bool success = 1;
  string event_id = 2;
  int32 settled_transactions_count = 3;
  string total_organizer_amount_wei = 4;
  string total_platform_fee_wei = 5;
  string settlement_transaction_hash = 6;
}

message PlatformTransaction {
  string id = 1;
  string transaction_hash = 2;
  string ticket_order_id = 3;
  string event_id = 4;
  string event_organizer_id = 5;
  string buyer_address = 6;
  string amount_wei = 7;
  string platform_fee_wei = 8;
  string organizer_amount_wei = 9;
  int32 platform_fee_percent = 10;
  string status = 11;
  int64 created_at = 12;
  int64 settled_at = 13;
  string settlement_transaction_hash = 14;
}

message ListPlatformTransactionsRequest {
  string event_id = 1;
  string status_filter = 2;
  int32 page_size = 3;
  string page_token = 4;
}

message ListPlatformTransactionsResponse {
  repeated PlatformTransaction transactions = 1;
  string next_page_token = 2;
}

// _____ Models _____
message Ticket {
  string id = 1;
  string event_id = 2;
  string ticket_type_id = 3;
  string token_id = 4;        // uint256, dạng string (ID của NFT)
  string owner_address = 5;   // Địa chỉ ví của người mua
  string session_id = 6;      // ID của session liên quan
  string status = 7;          // Ví dụ: PENDING_PAYMENT, PAID, MINTING, MINTED, FAILED_MINT
  string token_uri_cid = 8;   // CID của metadata JSON (chỉ hash, không có ipfs://)
  string transaction_hash = 9; // Hash của giao dịch mint
  int64 created_at = 10;

  string qr_code_data = 11;
  string check_in_status = 12;
  int64 check_in_time = 13;
  string check_in_location = 14;
  int64 expiry_time = 15;
}

message TicketType {
  string id = 1;
  string event_id = 2;
  string session_id = 3; // mongoDB ObjectId
 string contract_session_id = 4; // << THÊM: ID dạng số (string) của Session dùng cho contract
  string blockchain_event_id = 5; // ID của Event cha trên Blockchain (uint256, string)
  string name = 6;
  int32 total_quantity = 7;
  int32 available_quantity = 8;
  string price_wei = 9;
  int64 created_at = 10;
  int64 updated_at = 11;
}

// _____ Request/Response Messages _____
message CreateTicketTypeRequest { 
  string event_id = 1; 
  string session_id = 2; 
  // string contract_session_id = 3; // << THÊM: ID dạng số (string) của Session dùng cho contract
  string name = 3; 
  int32 total_quantity = 4; 
  string price_wei = 5;
}

message UpdateTicketTypeRequest { 
  string ticket_type_id = 1; 
  string blockchain_event_id = 2;
}

message GetTicketTypeRequest { 
  string ticket_type_id = 1; 
}

message ListTicketTypesByEventRequest { 
  string event_id = 1; 
}

message ListTicketTypesBySessionRequest { 
  string event_id = 1; 
  string session_id = 2; 
}

message ListTicketTypesResponse { 
  repeated TicketType ticket_types = 1; 
}

message InitiatePurchaseRequest {
  string ticket_type_id = 1;
  string buyer_address = 2; // Địa chỉ ví của người sẽ nhận NFT
}

message InitiatePurchaseResponse {
  string ticket_order_id = 1;        // ID của đơn hàng vé
  string payment_contract_address = 2; // Địa chỉ contract EventTicketNFT
  string price_to_pay_wei = 3;         // Số tiền cần thanh toán
  string blockchain_event_id = 4;      // ID sự kiện trên blockchain
  string session_id_for_contract = 5;  // Session ID cho contract
  string token_uri_cid = 6; 
}

message ConfirmPaymentAndRequestMintRequest {
  string ticket_order_id = 1;  // ID của đơn hàng vé từ InitiatePurchaseResponse
  string payment_transaction_hash = 2; // Hash của giao dịch thanh toán
}

message ConfirmPaymentAndRequestMintResponse {
  Ticket ticket = 1; // Trả về thông tin vé đã được cập nhật
}

message GetTicketRequest { 
  string ticket_id = 1; 
}

message ListTicketsByEventRequest { 
  string event_id = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsByOwnerRequest { 
  string owner_address = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsResponse { 
  repeated Ticket tickets = 1; 
  string next_page_token = 2; 
}

// Thêm messages cho check-in
message CheckInRequest {
  string qr_code_data = 1;
  string location = 2;
  string scanner_id = 3; // ID của người/thiết bị scan
}

message CheckInResponse {
  bool success = 1;
  string message = 2;
  Ticket ticket = 3;
}

message GenerateQRCodeRequest {
  string ticket_id = 1;
}

message GenerateQRCodeResponse {
  bool success = 1;
  string message = 2;
  string qr_code_data = 3;
  string qr_code_image_base64 = 4;
}

message ListAllTicketsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string status_filter = 3;
}

// ✅ THÊM: Analytics messages
message EventDashboardRequest {
  string event_id = 1;
  DateRange date_range = 2;
}

message DateRange {
  int64 start_date = 1; // Unix timestamp
  int64 end_date = 2;
}

message EventDashboardResponse {
  string event_id = 1;
  DateRange date_range = 2;
  TicketSummary ticket_summary = 3;
  RevenueSummary revenue_summary = 4;
  CheckinSummary checkin_summary = 5;
  repeated DailySale daily_trends = 6;
}

message TicketSummary {
  int32 total_tickets = 1;
  repeated StatusCount by_status = 2;
}

message StatusCount {
  string status = 1;
  int32 count = 2;
}

message RevenueSummary {
  string total_revenue_wei = 1;
  string platform_fees_wei = 2;
  string organizer_revenue_wei = 3;
  int32 transaction_count = 4;
}

message CheckinSummary {
  int32 total_minted = 1;
  repeated StatusCount by_status = 2;
}

message DailySale {
  string date = 1; // YYYY-MM-DD format
  int32 tickets_sold = 2;
}

message OrganizerStatsRequest {
  string organizer_id = 1;
}

message OrganizerStatsResponse {
  string organizer_id = 1;
  int32 total_events = 2;
  int32 total_tickets_sold = 3;
  string total_revenue_wei = 4;
  int32 active_events = 5;
}

message CheckinAnalyticsRequest {
  string event_id = 1;
  string time_period = 2; // "TODAY", "WEEK", "ALL"
}

message CheckinAnalyticsResponse {
  string event_id = 1;
  string time_period = 2;
  repeated HourlyCheckin hourly_checkins = 3;
  repeated LocationCount location_breakdown = 4;
  CheckinSummary summary = 5;
}

message HourlyCheckin {
  int32 hour = 1; // 0-23
  int32 count = 2;
}

message LocationCount {
  string location = 1;
  int32 count = 2;
}
