syntax = "proto3";

package ticket;

import "google/api/annotations.proto";
// import "google/protobuf/timestamp.proto"; // Nếu bạn dùng cho created_at/updated_at sau này
// import "google/protobuf/wrappers.proto"; // Nếu dùng cho các trường tùy chọn trong Update

option java_multiple_files = true;
// option go_package = "github.com/yourusername/yourproject/ticket";

// ----- Models -----
message Ticket {
  string id = 1;
  string event_id = 2;
  string ticket_type_id = 3;
  string token_id = 4;        // uint256, dạng string
  string owner_address = 5;
  string session_id = 6;
  string status = 7;
  string token_uri_cid = 8;
  string transaction_hash = 9;
  int64 created_at = 10;       // Unix timestamp (seconds)
}

message TicketType {
  string id = 1;
  string event_id = 2;
  string session_id = 3;          // ID của session mà loại vé này thuộc về
  string blockchain_event_id = 4; // ID của Event trên Blockchain (uint256, dạng string) - Sẽ được cập nhật sau
  string name = 5;
  int32 total_quantity = 6;
  int32 available_quantity = 7;
  string price_wei = 8;
  int64 created_at = 9;           // Unix timestamp (seconds)
  int64 updated_at = 10;          // Unix timestamp (seconds)
}

// ----- TicketService -----
service TicketService {
  rpc PreparePurchaseTicket(PreparePurchaseTicketRequest) returns (PreparePurchaseTicketResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/prepare_purchase"
      body: "*"
    };
  }
  rpc ConfirmPurchaseAndMintTicket(ConfirmPurchaseAndMintTicketRequest) returns (ConfirmPurchaseAndMintTicketResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/confirm_purchase"
      body: "*"
    };
  }
  rpc GetTicket(GetTicketRequest) returns (Ticket);
  rpc ListTicketsByEvent(ListTicketsByEventRequest) returns (ListTicketsResponse);
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse);
}

// ----- TicketTypeService -----
service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      post: "/v1/events/{event_id}/sessions/{session_id}/ticket_types" // Path rõ ràng hơn
      body: "*"
    };
  }
  rpc UpdateTicketType(UpdateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      put: "/v1/ticket_types/{ticket_type_id}" // Hoặc PATCH nếu chỉ cập nhật một phần
      body: "*" // Body sẽ chứa các trường cần cập nhật
    };
  }
  rpc GetTicketType(GetTicketTypeRequest) returns (TicketType);
  rpc ListTicketTypesByEvent(ListTicketTypesByEventRequest) returns (ListTicketTypesResponse); // Giữ nguyên để lấy all ticket types của event
  rpc ListTicketTypesBySession(ListTicketTypesBySessionRequest) returns (ListTicketTypesResponse) { // RPC mới hữu ích
     option (google.api.http) = {
      get: "/v1/events/{event_id}/sessions/{session_id}/ticket_types"
    };
  }
}

// ----- Messages cho TicketService -----
message PreparePurchaseTicketRequest {
  string ticket_type_id = 1;
  // string session_id = 2; // session_id đã có trong TicketType, không cần ở đây nếu ticket_type_id đã đủ
  string buyer_address = 3;
}

message PreparePurchaseTicketResponse {
  string payment_contract_address = 1;
  string price_wei = 2;
  string blockchain_event_id = 3;     // uint256, dạng string (của Event cha)
  string session_id_for_contract = 4; // uint256, dạng string (của Session mà TicketType này thuộc về)
  string token_uri_cid = 5;
}

message ConfirmPurchaseAndMintTicketRequest {
  string transaction_hash = 1;
  string ticket_type_id = 2;
  // string session_id = 3; // Có thể lấy từ TicketType
  string owner_address = 4;
}

message ConfirmPurchaseAndMintTicketResponse {
  Ticket ticket = 1;
}

message GetTicketRequest {
  string ticket_id = 1;
}

message ListTicketsByEventRequest { // Vẫn giữ để lấy tất cả vé của một sự kiện (qua nhiều session)
  string event_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListTicketsByOwnerRequest {
  string owner_address = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListTicketsResponse {
  repeated Ticket tickets = 1;
  string next_page_token = 2;
}

// ----- Messages cho TicketTypeService -----
message CreateTicketTypeRequest {
  string event_id = 1;   // ID của Event trong MongoDB
  string session_id = 2; // ID của Session trong Event mà loại vé này thuộc về
  string name = 3;
  int32 total_quantity = 4;
  string price_wei = 5;
  // blockchain_event_id sẽ được cập nhật sau bởi UpdateTicketType
}

message UpdateTicketTypeRequest {
  string ticket_type_id = 1;         // ID của TicketType cần cập nhật
  string blockchain_event_id = 2;    // (Bắt buộc) ID của Event cha trên blockchain (sau khi Event được publish)
  // Các trường tùy chọn khác nếu bạn muốn cho phép cập nhật (dùng google.protobuf.StringValue, etc. nếu cần phân biệt rỗng và không set)
  // string name = 3;
  // int32 total_quantity = 4;
  // string price_wei = 5;
}


message GetTicketTypeRequest {
  string ticket_type_id = 1;
}

message ListTicketTypesByEventRequest { // Vẫn giữ để lấy tất cả loại vé của một sự kiện
  string event_id = 1;
}
message ListTicketTypesBySessionRequest { // RPC mới
  string event_id = 1; // Để đảm bảo session thuộc đúng event
  string session_id = 2;
}

message ListTicketTypesResponse {
  repeated TicketType ticket_types = 1;
}