syntax = "proto3";

package ticket;

import "google/api/annotations.proto";

// _____ TicketTypeService _ PATHS KHÁC NHAU ĐỂ TRÁNH CONFLICT _____
service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      post: "/v1/ticket-types/create"  // THAY ĐỔI PATH
      body: "*"
    };
  }
  
  rpc UpdateTicketType(UpdateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      put: '/v1/ticket-types/{ticket_type_id}'
      body: "*"
    };
  }
  
  rpc GetTicketType(GetTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      get: "/v1/ticket-types/{ticket_type_id}"
    };
  }
  
  rpc ListTicketTypesByEvent(ListTicketTypesByEventRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-event/{event_id}"  // THAY ĐỔI PATH
    };
  }
  
  rpc ListTicketTypesBySession(ListTicketTypesBySessionRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-session/{event_id}/{session_id}"  // THAY ĐỔI PATH
    };
  }
}

// _____ TicketService _____
service TicketService {
  rpc InitiatePurchase(InitiatePurchaseRequest) returns (InitiatePurchaseResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/initiate-purchase"
      body: "*"
    };
  }

  rpc ConfirmPaymentAndRequestMint(ConfirmPaymentAndRequestMintRequest) returns (ConfirmPaymentAndRequestMintResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/confirm-payment-mint"
      body: "*"
    };
  }

  rpc GetTicket(GetTicketRequest) returns (Ticket) {
    option (google.api.http) = {
      get: "/v1/tickets/{ticket-id}"
    };
  }
  
  rpc ListTicketsByEvent(ListTicketsByEventRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-event/{event_id}"  // THAY ĐỔI PATH
    };
  }
  
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-owner/{owner_address}"  // THAY ĐỔI PATH
    };
  }
}

// _____ Models _____
message Ticket {
  string id = 1;
  string event_id = 2;
  string ticket_type_id = 3;
  string token_id = 4;        // uint256, dạng string (ID của NFT)
  string owner_address = 5;   // Địa chỉ ví của người mua
  string session_id = 6;      // ID của session liên quan
  string status = 7;          // Ví dụ: PENDING_PAYMENT, PAID, MINTING, MINTED, FAILED_MINT
  string token_uri_cid = 8;   // CID của metadata JSON (chỉ hash, không có ipfs://)
  string transaction_hash = 9; // Hash của giao dịch mint
  int64 created_at = 10;
}

message TicketType {
  string id = 1;
  string event_id = 2;
  string session_id = 3;
  string blockchain_event_id = 4; // ID của Event cha trên Blockchain (uint256, string)
  string name = 5;
  int32 total_quantity = 6;
  int32 available_quantity = 7;
  string price_wei = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

// _____ Request/Response Messages _____
message CreateTicketTypeRequest { 
  string event_id = 1; 
  string session_id = 2; 
  string name = 3; 
  int32 total_quantity = 4; 
  string price_wei = 5;
}

message UpdateTicketTypeRequest { 
  string ticket_type_id = 1; 
  string blockchain_event_id = 2;
}

message GetTicketTypeRequest { 
  string ticket_type_id = 1; 
}

message ListTicketTypesByEventRequest { 
  string event_id = 1; 
}

message ListTicketTypesBySessionRequest { 
  string event_id = 1; 
  string session_id = 2; 
}

message ListTicketTypesResponse { 
  repeated TicketType ticket_types = 1; 
}

message InitiatePurchaseRequest {
  string ticket_type_id = 1;
  string buyer_address = 2; // Địa chỉ ví của người sẽ nhận NFT
}

message InitiatePurchaseResponse {
  string ticket_order_id = 1;        // ID của đơn hàng vé
  string payment_contract_address = 2; // Địa chỉ contract EventTicketNFT
  string price_to_pay_wei = 3;         // Số tiền cần thanh toán
  string blockchain_event_id = 4;      // ID sự kiện trên blockchain
  string session_id_for_contract = 5;  // Session ID cho contract
}

message ConfirmPaymentAndRequestMintRequest {
  string ticket_order_id = 1;  // ID của đơn hàng vé từ InitiatePurchaseResponse
  string payment_transaction_hash = 2; // Hash của giao dịch thanh toán
}

message ConfirmPaymentAndRequestMintResponse {
  Ticket ticket = 1; // Trả về thông tin vé đã được cập nhật
}

message GetTicketRequest { 
  string ticket_id = 1; 
}

message ListTicketsByEventRequest { 
  string event_id = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsByOwnerRequest { 
  string owner_address = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsResponse { 
  repeated Ticket tickets = 1; 
  string next_page_token = 2; 
}

