syntax = "proto3";

package ticket;
option java_multiple_files = true;

// ---------------- Models ----------------

message Ticket {
  string id            = 1; // MongoDB ObjectId
  string eventId       = 2;
  string ticketTypeId  = 3;
  int64  tokenId       = 4;
  string ownerAddress  = 5;
  string sessionId     = 6;
  int64  createdAt     = 7;
  string qrCodeData    = 8; 
}

message TicketType {
  string id                = 1;
  string eventId           = 2;
  string type              = 3;
  int32  totalQuantity     = 4;
  int32  availableQuantity = 5;
  double price             = 6;
  int64  createdAt         = 7;
  int64  updatedAt         = 8;
}

// ---------------- TicketService ----------------

service TicketService {
  rpc CreateTicket(CreateTicketRequest)       returns (CreateTicketResponse);
  rpc GetTicket(GetTicketRequest)             returns (Ticket);
  rpc ListTickets(ListTicketsRequest)         returns (ListTicketsResponse);
  rpc DeleteTicket(DeleteTicketRequest)       returns (DeleteTicketResponse);

  rpc PurchaseTicket(PurchaseTicketRequest)   returns (PurchaseTicketResponse);
  rpc ConfirmTicket(ConfirmTicketRequest)     returns (ConfirmTicketResponse);
  rpc TransferTicket(TransferTicketRequest)   returns (TransferTicketResponse);
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse);
  rpc ConfirmByTx(ConfirmByTxRequest)         returns (ConfirmByTxResponse);
}

// ---------------- TicketTypeService ----------------

service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest)   returns (CreateTicketTypeResponse);
  rpc GetTicketType(GetTicketTypeRequest)         returns (TicketType);
  rpc ListTicketTypes(ListTicketTypesRequest)     returns (ListTicketTypesResponse);
  rpc UpdateTicketType(UpdateTicketTypeRequest)   returns (UpdateTicketTypeResponse);
  rpc DeleteTicketType(DeleteTicketTypeRequest)   returns (DeleteTicketTypeResponse);
}

// -------------- Messages ---------------

// Ticket CRUD
message CreateTicketRequest   { string eventId = 1; string ticketTypeId = 2; string ownerAddress = 3; string sessionId = 4; }
message CreateTicketResponse  { bool success = 1; string ticketId = 2; }
message GetTicketRequest      { string ticketId = 1; }
message ListTicketsRequest    { string eventId = 1; }
message DeleteTicketRequest   { string ticketId = 1; }
message DeleteTicketResponse  { bool success = 1; }
message ListTicketsResponse   { repeated Ticket tickets = 1; }

// Purchase / Confirm / Transfer
message PurchaseTicketRequest  { string eventId = 1; string ticketTypeId = 2; string sessionId = 3; string ownerAddress = 4; }
message PurchaseTicketResponse { bool success = 1; string paymentInfoJson = 2; }
message ConfirmTicketRequest   {
  string eventId      = 1;
  string ticketTypeId = 2;
  string sessionId    = 3;
  int64  tokenId      = 4;
  string ownerAddress = 5;
}
message ConfirmTicketResponse  { bool success = 1; }
message TransferTicketRequest  { string ticketId = 1; string fromAddress = 2; string toAddress = 3; }
message TransferTicketResponse { bool success = 1; }

// List by owner
message ListTicketsByOwnerRequest { string ownerAddress = 1; }
message ConfirmByTxRequest         { string transactionHash = 1; }
message ConfirmByTxResponse        { bool success         = 1; }

// TicketType CRUD
message CreateTicketTypeRequest   { string eventId = 1; string type = 2; int32 totalQuantity = 3; double price = 4; }
message CreateTicketTypeResponse  { bool success = 1; string ticketTypeId = 2; }
message GetTicketTypeRequest      { string ticketTypeId = 1; }
message ListTicketTypesRequest    { string eventId = 1; }
message UpdateTicketTypeRequest   { string ticketTypeId = 1; int32 availableQuantity = 2; }
message UpdateTicketTypeResponse  { bool success = 1; }
message DeleteTicketTypeRequest   { string ticketTypeId = 1; }
message DeleteTicketTypeResponse  { bool success = 1; }
message ListTicketTypesResponse   { repeated TicketType types = 1; }
