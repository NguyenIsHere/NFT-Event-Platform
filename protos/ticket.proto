syntax = "proto3";

package ticket;

import "google/api/annotations.proto";
// import "google/protobuf/timestamp.proto";

// ----- Models -----
message Ticket {
  string id = 1;              // MongoDB ObjectId
  string event_id = 2;        // ID của Event (từ event-service)
  string ticket_type_id = 3;  // ID của TicketType
  string token_id = 4;        // ID của NFT trên blockchain (uint256, lưu dạng string)
  string owner_address = 5;   // Địa chỉ ví sở hữu vé NFT
  string session_id = 6;      // ID của session trong Event
  string status = 7;          // Trạng thái vé: AVAILABLE, SOLD, USED, PENDING_MINT etc.
  string token_uri_cid = 8;   // CID của metadata JSON cho vé này
  string transaction_hash = 9; // Hash của giao dịch mint vé
  int64 created_at = 10;       // Unix timestamp
  // string qr_code_data = 11;
}

message TicketType {
  string id = 1;                  // MongoDB ObjectId
  string event_id = 2;            // ID của Event (từ event-service)
  string blockchain_event_id = 3; // ID của Event trên Blockchain (uint256, lưu dạng string)
  string name = 4;                // Tên loại vé
  int32 total_quantity = 5;
  int32 available_quantity = 6;
  string price_wei = 7;           // Giá vé dưới dạng chuỗi số nguyên lớn (Wei)
  int64 created_at = 8;
  int64 updated_at = 9;
}

// ----- TicketService -----
service TicketService {
  rpc PreparePurchaseTicket(PreparePurchaseTicketRequest) returns (PreparePurchaseTicketResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/prepare_purchase"
      body: "*"
    };
  }
  rpc ConfirmPurchaseAndMintTicket(ConfirmPurchaseAndMintTicketRequest) returns (ConfirmPurchaseAndMintTicketResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/confirm_purchase"
      body: "*"
    };
  }
  rpc GetTicket(GetTicketRequest) returns (Ticket); // Trả về message Ticket
  rpc ListTicketsByEvent(ListTicketsByEventRequest) returns (ListTicketsResponse);
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse);
}

// ----- TicketTypeService -----
service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest) returns (TicketType); // Trả về message TicketType
  rpc GetTicketType(GetTicketTypeRequest) returns (TicketType);
  rpc ListTicketTypesByEvent(ListTicketTypesByEventRequest) returns (ListTicketTypesResponse);
}

// ----- Messages cho TicketService -----
message PreparePurchaseTicketRequest {
  string ticket_type_id = 1;
  string session_id = 2;     // Tùy chọn
  string buyer_address = 3;  // Địa chỉ ví của người mua tiềm năng (để kiểm tra điều kiện nếu cần)
}

message PreparePurchaseTicketResponse {
  string payment_contract_address = 1;
  string price_wei = 2;
  string blockchain_event_id = 3;     // uint256, dạng string
  string session_id_for_contract = 4; // uint256, dạng string (session ID sẽ được dùng trên contract)
  string token_uri_cid = 5;           // CID của metadata JSON cho vé này
}

message ConfirmPurchaseAndMintTicketRequest {
  string transaction_hash = 1; // Hash của giao dịch người dùng đã thực hiện
  string ticket_type_id = 2;
  string session_id = 3;       // Session vé được mua
  string owner_address = 4;    // Địa chỉ ví của người mua (đã thực hiện giao dịch)
  // Thông tin này đã được trả về từ PreparePurchase và client dùng để gọi contract
  // Không cần truyền lại token_uri_cid và blockchain_event_id ở đây nữa nếu luồng là user tự gọi contract.
  // Tuy nhiên, nếu backend mint hộ thì cần. Giả định user tự gọi contract.
}

message ConfirmPurchaseAndMintTicketResponse {
  Ticket ticket = 1;
}

message GetTicketRequest {
  string ticket_id = 1;
}

message ListTicketsByEventRequest {
  string event_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListTicketsByOwnerRequest {
  string owner_address = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListTicketsResponse {
  repeated Ticket tickets = 1;
  string next_page_token = 2;
}

// ----- Messages cho TicketTypeService -----
message CreateTicketTypeRequest {
  string event_id = 1;              // ID của Event trong MongoDB
  string blockchain_event_id = 2;   // ID của Event trên Blockchain (uint256 dạng string)
  string name = 3;
  int32 total_quantity = 4;
  string price_wei = 5;
}

message GetTicketTypeRequest {
  string ticket_type_id = 1;
}

message ListTicketTypesByEventRequest {
  string event_id = 1;
}

message ListTicketTypesResponse {
  repeated TicketType ticket_types = 1;
}