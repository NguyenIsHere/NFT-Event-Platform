syntax = "proto3";

package ticket;

import "google/api/annotations.proto";

// _____ TicketTypeService _ PATHS KHÁC NHAU ĐỂ TRÁNH CONFLICT _____
service TicketTypeService {
  rpc CreateTicketType(CreateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      post: "/v1/ticket-types/create"
      body: "*"
    };
  }
  
  rpc UpdateTicketType(UpdateTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      put: '/v1/ticket-types/{ticket_type_id}'
      body: "*"
    };
  }
  
  rpc GetTicketType(GetTicketTypeRequest) returns (TicketType) {
    option (google.api.http) = {
      get: "/v1/ticket-types/{ticket_type_id}"
    };
  }

  rpc GetTicketTypeWithAvailability(GetTicketTypeWithAvailabilityRequest) returns (TicketType) {
    option (google.api.http) = {
      get: "/v1/ticket-types/{ticket_type_id}/availability"
    };
  }

  // ✅ NEW: Publish ticket type to blockchain
  rpc PublishTicketType(PublishTicketTypeRequest) returns (PublishTicketTypeResponse) {
    option (google.api.http) = {
      post: "/v1/ticket-types/{ticket_type_id}/publish"
      body: "*"
    };
  }

  // ✅ NEW: Get all ticket types for admin
  rpc ListAllTicketTypes(ListAllTicketTypesRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types"
    };
  }
  
  rpc ListTicketTypesByEvent(ListTicketTypesByEventRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-event/{event_id}"
    };
  }
  
  rpc ListTicketTypesBySession(ListTicketTypesBySessionRequest) returns (ListTicketTypesResponse) {
    option (google.api.http) = {
      get: "/v1/ticket-types/by-session/{event_id}/{session_id}"
    };
  }
}

// _____ TicketService _____
service TicketService {
  rpc InitiatePurchase(InitiatePurchaseRequest) returns (InitiatePurchaseResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/initiate-purchase"
      body: "*"
    };
  }

  rpc PrepareMetadata(PrepareMetadataRequest) returns (PrepareMetadataResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/prepare-metadata"
      body: "*"
    };
  }

  rpc ConfirmPaymentAndRequestMint(ConfirmPaymentAndRequestMintRequest) returns (ConfirmPaymentAndRequestMintResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/confirm-payment-mint"
      body: "*"
    };
  }

  rpc ListAllTickets(ListAllTicketsRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/all"
    };
  }

  rpc GetTicket(GetTicketRequest) returns (Ticket) {
    option (google.api.http) = {
      get: "/v1/tickets/{ticket_id}"
    };
  }
  
  rpc ListTicketsByEvent(ListTicketsByEventRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-event/{event_id}"
    };
  }
  
  rpc ListTicketsByOwner(ListTicketsByOwnerRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/by-owner/{owner_address}"
    };
  }

  rpc GenerateQRCode (GenerateQRCodeRequest) returns (GenerateQRCodeResponse) {
    // ✅ FIX: Thêm HTTP rule để Kong tự động ánh xạ body
    option (google.api.http) = {
      post: "/v1/tickets/{ticket_id}/qr-code"
      body: "*"
    };
  }
    
  rpc CheckIn (CheckInRequest) returns (CheckInResponse) {
    option (google.api.http) = {
      post: "/v1/tickets/check-in"
      body: "*"
    };
  }

  rpc GetEventDashboard(EventDashboardRequest) returns (EventDashboardResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}/analytics/dashboard"
    };
  }
  
  rpc GetOrganizerStats(OrganizerStatsRequest) returns (OrganizerStatsResponse) {
    option (google.api.http) = {
      get: "/v1/organizers/{organizer_id}/analytics"
    };
  }
  
  rpc GetCheckinAnalytics(CheckinAnalyticsRequest) returns (CheckinAnalyticsResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}/analytics/checkin"
    };
  }

  rpc GetSoldSeatsByEvent(GetSoldSeatsByEventRequest) returns (GetSoldSeatsByEventResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/sold-seats/event/{event_id}"
    };
  }

  rpc GetTicketMetadata(GetTicketMetadataRequest) returns (GetTicketMetadataResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/metadata/{ticket_id}"
    };
  }

  rpc GetMyTicketsWithDetails(GetMyTicketsWithDetailsRequest) returns (GetMyTicketsWithDetailsResponse) {
    option (google.api.http) = {
      get: "/v1/tickets/my-tickets/{owner_address}/details"
    };
  }

  // ✅ NEW: Admin Analytics
  rpc GetAdminAnalytics(GetAdminAnalyticsRequest) returns (GetAdminAnalyticsResponse) {
    option (google.api.http) = {
      get: "/v1/admin/analytics"
    };
  }

  // ✅ NEW: Organizer Analytics  
  rpc GetOrganizerAnalytics(GetOrganizerAnalyticsRequest) returns (GetOrganizerAnalyticsResponse) {
    option (google.api.http) = {
      get: "/v1/organizers/{organizer_id}/dashboard/analytics"
    };
  }

  // ✅ NEW: Log revenue settlement từ blockchain service
  rpc LogRevenueSettlement(LogRevenueSettlementRequest) returns (LogResponse) {
    option (google.api.http) = {
      post: "/v1/admin/transactions/revenue-settlement"
      body: "*"
    };
  }

  // ✅ NEW: Log platform withdraw từ blockchain service
  rpc LogPlatformWithdraw(LogPlatformWithdrawRequest) returns (LogResponse) {
    option (google.api.http) = {
      post: "/v1/admin/transactions/platform-withdraw"
      body: "*"
    };
  }

  // ✅ NEW: Admin Transaction Management
  rpc GetAllTransactions(GetAllTransactionsRequest) returns (GetAllTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/admin/transactions"
    };
  }

  // ✅ NEW: Get transaction details
  rpc GetTransactionDetails(GetTransactionDetailsRequest) returns (TransactionDetails) {
    option (google.api.http) = {
      get: "/v1/admin/transactions/{transaction_id}"
    };
  }

  // ✅ NEW: Sync availability from contract
  rpc SyncTicketTypeAvailability(SyncTicketTypeAvailabilityRequest) returns (SyncTicketTypeAvailabilityResponse) {
    option (google.api.http) = {
      post: "/v1/ticket-types/{ticket_type_id}/sync-availability"
      body: "*"
    };
  }
}

// ✅ NEW: Transaction messages
message GetAllTransactionsRequest {
  DateRange date_range = 1;
  string transaction_type = 2; // Filter by type: "ALL", "TICKET_PURCHASE", "REVENUE_SETTLEMENT", etc.
  string status = 3; // Filter by status: "ALL", "CONFIRMED", "PENDING", "FAILED"
  string organizer_id = 4; // Filter by organizer (optional)
  string event_id = 5; // Filter by event (optional)
  int32 page_size = 6;
  string page_token = 7;
}

message GetAllTransactionsResponse {
  repeated TransactionDetails transactions = 1;
  string next_page_token = 2;
  TransactionSummaryStats summary = 3;
}

message GetTransactionDetailsRequest {
  string transaction_id = 1;
}

message TransactionDetails {
  string id = 1;
  string transaction_hash = 2;
  uint64 block_number = 3;
  string gas_used = 4;
  string gas_price_wei = 5;
  string type = 6; // TICKET_PURCHASE, REVENUE_SETTLEMENT, etc.
  string status = 7; // CONFIRMED, PENDING, FAILED, CANCELLED
  string event_id = 8;
  string organizer_id = 9;
  string user_id = 10;
  string ticket_type_id = 11;
  string amount_wei = 12;
  string platform_fee_wei = 13;
  string organizer_amount_wei = 14;
  int32 fee_percent_at_time = 15;
  string from_address = 16;
  string to_address = 17;
  string description = 18;
  string failure_reason = 19;
  int64 created_at = 20;
  int64 processed_at = 21;
  map<string, string> metadata = 22;
  repeated string related_ticket_ids = 23;
  string related_purchase_id = 24;
  
  // ✅ Additional enriched data
  EventSummary event_info = 25;
  OrganizerSummary organizer_info = 26;
  UserSummary user_info = 27;
}

message TransactionSummaryStats {
  int32 total_transactions = 1;
  string total_amount_wei = 2;
  string total_platform_fees_wei = 3;
  string total_organizer_amount_wei = 4;
  repeated TypeCount by_type = 5;
  repeated StatusCount by_status = 6;
  string total_gas_used = 7;
  string avg_gas_price_wei = 8;
}

message TypeCount {
  string type = 1;
  int32 count = 2;
  string total_amount_wei = 3;
}

message EventSummary {
  string id = 1;
  string name = 2;
  string status = 3;
  string blockchain_event_id = 4;
}

message OrganizerSummary {
  string id = 1;
  string name = 2;
  string email = 3;
}

message UserSummary {
  string id = 1;
  string name = 2;
  string email = 3;
  string wallet_address = 4;
}

// ✅ NEW: LogRevenueSettlementRequest
message LogRevenueSettlementRequest {
  string transaction_hash = 1;
  uint64 block_number = 2;
  string gas_used = 3;
  string gas_price_wei = 4;
  string event_id = 5;
  string organizer_id = 6;
  string organizer_amount_wei = 7;
  string platform_fee_wei = 8;
  string organizer_address = 9;
  string event_name = 10;
}

// ✅ NEW: LogPlatformWithdrawRequest
message LogPlatformWithdrawRequest {
  string transaction_hash = 1;
  uint64 block_number = 2;
  string gas_used = 3;
  string gas_price_wei = 4;
  string amount_wei = 5;
  string admin_address = 6;
}

// ✅ NEW: LogResponse
message LogResponse {
  bool success = 1;
  string message = 2;
  string log_id = 3; // ✅ NEW: ID của log record được tạo
}

message HourlyPurchase {
  int32 hour = 1;
  int32 initiated_count = 2;
  int32 confirmed_count = 3;
}

// _____ Models _____
message Ticket {
  string id = 1;
  string event_id = 2;
  string ticket_type_id = 3;
  string token_id = 4;
  string owner_address = 5;
  string session_id = 6;
  string status = 7;
  string token_uri_cid = 8;
  string transaction_hash = 9;
  int64 created_at = 10;
  string qr_code_data = 11;
  string check_in_status = 12;
  int64 check_in_time = 13;
  string check_in_location = 14;
  int64 expiry_time = 15;
  // ✅ THÊM: Seat information
  SeatInfo seat_info = 16;
}

// ✅ THÊM: Seat information message
message SeatInfo {
  string seat_key = 1;      // e.g., "section1-0-5"
  string section = 2;       // e.g., "section1"
  string row = 3;           // e.g., "0" (displayed as "A")
  string seat = 4;          // e.g., "5" (displayed as "6")
}

message TicketType {
  string id = 1;
  string event_id = 2;
  string session_id = 3;
  string contract_session_id = 4;
  string blockchain_event_id = 5;
  string blockchain_ticket_type_id = 6; // ✅ NEW: Blockchain ticket type ID
  string name = 7;
  int32 total_quantity = 8;
  int32 available_quantity = 9;
  string price_wei = 10;
  int64 created_at = 11;
  int64 updated_at = 12;
}

// _____ Request/Response Messages _____
message CreateTicketTypeRequest { 
  string event_id = 1; 
  string session_id = 2; 
  string name = 3; 
  int32 total_quantity = 4; 
  string price_wei = 5;
}

message UpdateTicketTypeRequest { 
  string ticket_type_id = 1; 
  string blockchain_event_id = 2;
  string blockchain_ticket_type_id = 3; // ✅ NEW: Optional blockchain ticket type ID
}

message GetTicketTypeRequest { 
  string ticket_type_id = 1; 
}

message GetTicketTypeWithAvailabilityRequest {
  string ticket_type_id = 1;
}

// ✅ NEW: Publish ticket type messages
message PublishTicketTypeRequest {
  string ticket_type_id = 1;
}

message PublishTicketTypeResponse {
  bool success = 1;
  string message = 2;
  TicketType ticket_type = 3;
  string blockchain_ticket_type_id = 4;
  string transaction_hash = 5;
}

message ListTicketTypesByEventRequest { 
  string event_id = 1; 
}

message ListTicketTypesBySessionRequest { 
  string event_id = 1; 
  string session_id = 2; 
}

message ListTicketTypesResponse { 
  repeated TicketType ticket_types = 1; 
}

// ✅ CẬP NHẬT: InitiatePurchaseRequest để hỗ trợ seat selection
message InitiatePurchaseRequest {
  string ticket_type_id = 1;
  string buyer_address = 2;
  int32 quantity = 3;                    // ✅ THÊM: Quantity cho non-seat events
  repeated string selected_seats = 4;    // ✅ THÊM: Selected seat keys cho seat events
}

message InitiatePurchaseResponse {
  string ticket_order_id = 1;
  string payment_contract_address = 2;
  string price_to_pay_wei = 3;
  string blockchain_event_id = 4;
  string blockchain_ticket_type_id = 5; // ✅ ADD
  string session_id_for_contract = 6;
  string token_uri_cid = 7; 
  string purchase_id = 8;
  // ✅ NEW: Include availability info
  uint32 contract_remaining = 9;
  uint32 db_remaining = 10;
}

// ✅ NEW: Sync availability messages
message SyncTicketTypeAvailabilityRequest {
  string ticket_type_id = 1;
}

message SyncTicketTypeAvailabilityResponse {
  string ticket_type_id = 1;
  uint32 old_db_remaining = 2;
  uint32 new_db_remaining = 3;
  string contract_price_wei = 4;
  int64 synced_at = 5;
}

message ConfirmPaymentAndRequestMintRequest {
  string ticket_order_id = 1;
  string payment_transaction_hash = 2;
}

message ConfirmPaymentAndRequestMintResponse {
  Ticket ticket = 1;
  repeated Ticket tickets = 2;  // ✅ THÊM: Để hỗ trợ multiple tickets
}

message GetTicketRequest { 
  string ticket_id = 1; 
}

message ListTicketsByEventRequest { 
  string event_id = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsByOwnerRequest { 
  string owner_address = 1; 
  int32 page_size = 2; 
  string page_token = 3; 
}

message ListTicketsResponse { 
  repeated Ticket tickets = 1; 
  string next_page_token = 2; 
}

// Thêm messages cho check-in
message CheckInRequest {
  string qr_code_data = 1;
  string location = 2;
  string scanner_id = 3;
}

// ✅ CheckInResponse with verification method
message CheckInResponse {
  bool success = 1;
  string message = 2;
  Ticket ticket = 3;
  string verification_method = 4; // Always "DIGITAL_SIGNATURE"
}

// ✅ SIMPLIFIED: GenerateQRCodeRequest with only secure options
message GenerateQRCodeRequest {
  string ticket_id = 1;
  string qr_type = 2; // Always "SECURE_SIGNATURE"
  SecureQRData secure_qr_data = 3; // Required: secure QR generation data

    // ✅ NEW: Direct fields for HTTP compatibility
  string address = 4;
  string message = 5;
  string signature = 6;
  string ticket_id_data = 7;
  string event_id_data = 8;
  int64 timestamp = 9;
  string nonce = 10;
  string qr_image_base64 = 11;
}

// ✅ ENHANCED: SecureQRData message với validation fields
message SecureQRData {
  string address = 1;
  string message = 2;
  string signature = 3;
  string ticket_id = 4;
  string event_id = 5;
  int64 timestamp = 6;
  string nonce = 7;
  string qr_image_base64 = 8; // Optional: pre-generated image
  string verification_status = 9; // Optional: verification result
}

// ✅ ENHANCED: GenerateQRCodeResponse với validation info
message GenerateQRCodeResponse {
  bool success = 1;
  string message = 2;
  string qr_code_data = 3;
  string qr_code_image_base64 = 4;
  string qr_type = 5; // Always "SECURE_SIGNATURE"
  int64 generated_at = 6; // Timestamp when QR was generated
  int64 expires_at = 7; // When QR expires (24h later)
}

message ListAllTicketsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string status_filter = 3;
}

// ✅ Analytics messages (unchanged)
message EventDashboardRequest {
  string event_id = 1;
  DateRange date_range = 2;
}

message DateRange {
  int64 start_date = 1;
  int64 end_date = 2;
}


message TicketSummary {
  int32 total_tickets = 1;
  repeated StatusCount by_status = 2;
}

message StatusCount {
  string status = 1;
  int32 count = 2;
}

message RevenueSummary {
  string total_revenue_wei = 1;
  string platform_fees_wei = 2;
  string organizer_revenue_wei = 3;
  int32 transaction_count = 4;
}

message CheckinSummary {
  int32 total_minted = 1;
  repeated StatusCount by_status = 2;
}

message OrganizerStatsRequest {
  string organizer_id = 1;
}

message OrganizerStatsResponse {
  string organizer_id = 1;
  int32 total_events = 2;
  int32 total_tickets_sold = 3;
  string total_revenue_wei = 4;
  int32 active_events = 5;
}

message CheckinAnalyticsRequest {
  string event_id = 1;
  string time_period = 2;
}

message CheckinAnalyticsResponse {
  string event_id = 1;
  string time_period = 2;
  repeated HourlyCheckin hourly_checkins = 3;
  repeated LocationCount location_breakdown = 4;
  CheckinSummary summary = 5;
}

message HourlyCheckin {
  int32 hour = 1;
  int32 count = 2;
}

message LocationCount {
  string location = 1;
  int32 count = 2;
}

message PurchaseSummary {
  int32 total_purchases = 1;
  repeated StatusCount by_status = 2;
  string conversion_rate = 3;
  string abandonment_rate = 4;
}

message EventDashboardResponse {
  string event_id = 1;
  DateRange date_range = 2;
  TicketSummary ticket_summary = 3;
  PurchaseSummary purchase_summary = 4;
  RevenueSummary revenue_summary = 5;
  CheckinSummary checkin_summary = 6;
  repeated DailySale daily_trends = 7;
  repeated PurchaseFunnelStep purchase_funnel = 8;
  
  // ✅ ADD: Enhanced analytics fields
  repeated PurchaseFlowStep purchase_flow = 9;
  repeated RecentTransaction recent_transactions = 10;
  repeated RevenueByTicketType revenue_by_ticket_type = 11;
  repeated RevenueByHour revenue_by_hour = 12;
  repeated PaymentMethod payment_methods = 13;
  GasAnalysis gas_analysis = 14;
  repeated FailureReason failure_reasons = 15;
}

// ✅ ADD: New message types for enhanced analytics
message PurchaseFlowStep {
  string status = 1;
  int32 count = 2;
  int64 avg_completion_time_ms = 3;
}

message RecentTransaction {
  string id = 1;
  string type = 2;
  string status = 3;
  string created_at = 4;
  string description = 5;
  string amount_wei = 6;
  string transaction_hash = 7;
}

message RevenueByTicketType {
  string ticket_type_id = 1;
  string name = 2;
  string revenue_wei = 3;
  int32 tickets_sold = 4;
}

message RevenueByHour {
  int32 hour = 1;
  string revenue_wei = 2;
  int32 transaction_count = 3;
}

message PaymentMethod {
  string name = 1;
  string type = 2;
  int32 count = 3;
  string success_rate = 4;
}

message GasAnalysis {
  string avg_gas_used = 1;
  string avg_gas_price_gwei = 2;
  string total_gas_cost_eth = 3;
}

message FailureReason {
  string reason = 1;
  int32 count = 2;
}

message PurchaseFunnelStep {
  string status = 1;
  int32 count = 2;
  int64 avg_completion_time_ms = 3;
}

message DailySale {
  string date = 1;
  int32 tickets_sold = 2;
  int32 purchase_count = 3; // ✅ NEW: Purchase count per day
  string revenue_wei = 4; // ✅ NEW: Revenue per day
}

message GetSoldSeatsByEventRequest {
  string event_id = 1;
}

message SoldSeat {
  string seat_key = 1;
  string status = 2;
}

message GetSoldSeatsByEventResponse {
  string event_id = 1;
  repeated SoldSeat sold_seats = 2;
}

message GetTicketMetadataRequest {
  string ticket_id = 1;
}

message GetTicketMetadataResponse {
  string metadata = 1;
}

message PrepareMetadataRequest {
  string ticket_order_id = 1;
  int32 quantity = 2;
  repeated string selected_seats = 3;
}

message PrepareMetadataResponse {
  bool success = 1;
  repeated string metadata_uris = 2;
}

message ListAllTicketTypesRequest {
  int32 page_size = 1;
  string page_token = 2;
  string status_filter = 3;
  string organizer_id = 4;
  string event_id = 5;
}

// Thêm request message
message GetMyTicketsWithDetailsRequest {
  string owner_address = 1;  // Wallet address của người dùng
}

// Thêm response message
message GetMyTicketsWithDetailsResponse {
  repeated TicketWithDetails tickets = 1;
}

// Thêm TicketWithDetails message để chứa thông tin chi tiết
message TicketWithDetails {
  // Thông tin ticket
  string id = 1;
  string event_id = 2;
  string ticket_type_id = 3;
  string token_id = 4;
  string owner_address = 5;
  string session_id = 6;
  string status = 7;
  string token_uri_cid = 8;
  string transaction_hash = 9;
  int64 created_at = 10;
  string qr_code_data = 11;
  string check_in_status = 12;
  int64 check_in_time = 13;
  string check_in_location = 14;
  int64 expiry_time = 15;
  SeatInfo seat_info = 16;
  
  // Thông tin ticket type
  TicketTypeDetails ticket_type = 17;
  
  // Thông tin event
  EventDetails event = 18;
}

// Chi tiết ticket type
message TicketTypeDetails {
  string id = 1;
  string name = 2;
  string price_wei = 3;
}

// Chi tiết event
message EventDetails {
  string id = 1;
  string name = 2;
  string description = 3;
  string location = 4;
  string banner_url_cid = 5;
  repeated SessionDetails sessions = 6;
}

// Chi tiết session
message SessionDetails {
  string id = 1;
  string name = 2;
  int64 start_time = 3;
  int64 end_time = 4;
}

// ✅ NEW: Admin Analytics Messages
message GetAdminAnalyticsRequest {
  DateRange date_range = 1;
  string transaction_type = 2; // Optional filter: "TICKET_PURCHASE", "REVENUE_SETTLEMENT", etc.
}

message GetAdminAnalyticsResponse {
  DateRange date_range = 1;
  repeated TransactionSummary transaction_summary = 2;
  repeated DailyTrend daily_trends = 3;
  repeated TopEventByRevenue top_events_by_revenue = 4;
}

message TransactionSummary {
  string type = 1;
  int32 count = 2;
  string total_amount_wei = 3;
  string total_platform_fee_wei = 4;
  string total_organizer_amount_wei = 5;
}

message DailyTrend {
  string date = 1; // YYYY-MM-DD
  string type = 2;
  int32 count = 3;
  string total_amount_wei = 4;
}

message TopEventByRevenue {
  string event_id = 1;
  int32 tickets_sold = 2;
  string total_revenue_wei = 3;
  string organizer_revenue_wei = 4;
  string platform_fees_wei = 5;
}

// ✅ NEW: Organizer Analytics Messages
message GetOrganizerAnalyticsRequest {
  string organizer_id = 1;
  DateRange date_range = 2;
}

message GetOrganizerAnalyticsResponse {
  string organizer_id = 1;
  DateRange date_range = 2;
  
  // ✅ ADD: Total summary fields (like backend log shows)
  int32 total_events = 3;
  int32 total_tickets_sold = 4;
  string total_revenue_wei = 5;
  
  // ✅ ADD: Breakdown data with proper structure
  repeated OrganizerEventBreakdown event_breakdown = 6;
  repeated OrganizerTransactionSummary transaction_summary = 7;
  repeated DailyTrend daily_trends = 8;  // ✅ ADD: Missing daily trends
}

message OrganizerTransactionSummary {
  string type = 1;
  int32 count = 2;
  string total_revenue_wei = 3;
  int32 tickets_sold = 4;
}

message OrganizerEventBreakdown {
  string event_id = 1;
  string event_name = 2;        // ✅ ADD: Missing in current proto
  string status = 3;            // ✅ ADD: Missing in current proto
  int32 tickets_sold = 4;
  string total_revenue_wei = 5;  // ✅ CHANGE: Was just revenue_wei
  string platform_fees_paid_wei = 6;
  double conversion_rate = 7;    // ✅ ADD: Missing conversion rate
}

