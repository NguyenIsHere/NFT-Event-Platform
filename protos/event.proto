syntax = "proto3";

package event;

import "google/api/annotations.proto";
// import "google/protobuf/timestamp.proto";

// ----- EventService -----
service EventService {
  rpc CreateEvent(CreateEventRequest) returns (EventResponse) {
    option (google.api.http) = {
      post: "/v1/events"
      body: "*"
    };
  }
  rpc GetEvent(GetEventRequest) returns (EventResponse) {
    option (google.api.http) = {
      get: "/v1/events/{event_id}"
    };
  }
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  }
  rpc PublishEvent(PublishEventRequest) returns (EventResponse) {
    option (google.api.http) = {
        post: "/v1/events/{event_id}/publish" // Hoặc một path khác
        body: "*" // Có thể không cần body nếu chỉ cần event_id
    };
  }
  // Thêm UpdateEvent, DeleteEvent nếu cần
}

// ----- Messages -----
message Event {
  string id = 1;                   // MongoDB ObjectId (string)
  string organizer_id = 2;
  string name = 3;
  string description = 4;
  string location = 5;
  string banner_url_cid = 6;       // CID của ảnh banner trên IPFS
  repeated Session sessions = 7;
  bool seat_map_enabled = 8;
  string status = 9;
  bool is_active = 10;             // Sự kiện có đang mở bán không
  string created_at = 11;          // String ISO 8601 date
  string updated_at = 12;          // String ISO 8601 date
  string blockchain_event_id = 13; // ID của sự kiện này trên Blockchain (uint256, lưu dạng string)
}

message Session {
  string id = 1;                   // ID của session (Mongoose tự tạo, hoặc bạn có thể dùng UUID)
  string name = 2;                 // Tên session
  int64 start_time = 3;            // Unix timestamp (seconds or milliseconds)
  int64 end_time = 4;              // Unix timestamp
}

message CreateEventRequest {
  string organizer_id = 1;
  string name = 2;
  string description = 3;
  string location = 4;
  string banner_file_content_base64 = 5; // Client gửi nội dung file banner đã mã hóa base64
  string banner_original_file_name = 6; // Tên file banner gốc
  repeated SessionInput sessions = 7;
  bool seat_map_enabled = 8;
  bool is_active = 9;
  // Thông tin để đăng ký event lên blockchain ngay khi tạo (tùy chọn)
  string initial_blockchain_event_id = 10; // ID bạn muốn dùng cho event trên contract (uint256 dạng string)
  string initial_price_wei = 11;           // Giá vé mặc định ban đầu (Wei dạng string)
  string initial_total_supply = 12;        // Tổng cung vé ban đầu (uint256 dạng string)
}

message SessionInput {
  string name = 1;
  int64 start_time = 2;
  int64 end_time = 3;
}

message EventResponse {
  Event event = 1;
}

message GetEventRequest {
  string event_id = 1; // ID của Event trong MongoDB
}

message ListEventsRequest {
  string organizer_id = 1; // Lọc event theo organizer (tùy chọn)
  int32 page_size = 2;
  string page_token = 3;
}

message ListEventsResponse {
  repeated Event events = 1;
  string next_page_token = 2;
}

message PublishEventRequest {
  string event_id = 1; // ID của Event trong MongoDB
  // Các thông tin cần để đăng ký lên blockchain nếu chưa có từ CreateEventRequest
  // Hoặc event-service sẽ tự tổng hợp từ các TicketType
  string desired_blockchain_event_id = 2; // ID mong muốn cho event trên contract
  string default_price_wei_on_chain = 3;  // Giá mặc định cho event trên contract
  string total_supply_on_chain = 4;       // Tổng cung cho event trên contract
}