syntax = "proto3";

package blockchain;

import "google/api/annotations.proto";

// ----- BlockchainService -----
service BlockchainService {
  // Được gọi bởi EventService khi tạo sự kiện mới trong hệ thống
  rpc RegisterEventOnBlockchain(RegisterEventOnBlockchainRequest) returns (RegisterEventOnBlockchainResponse) {
    // Endpoint này có thể không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  rpc RegisterTicketTypeOnBlockchain(RegisterTicketTypeOnBlockchainRequest) returns (RegisterTicketTypeOnBlockchainResponse);

  // Được gọi bởi TicketService để lấy thông tin cần thiết cho việc thanh toán
  rpc GetTicketPaymentDetails(GetTicketPaymentDetailsRequest) returns (GetTicketPaymentDetailsResponse) {
    // Không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  // Được gọi bởi TicketService (hoặc một quy trình backend khác) để mint vé NFT
  // sau khi các điều kiện (ví dụ: thanh toán) đã được xác nhận.
  rpc MintTicket(MintTicketRequest) returns (MintTicketResponse) {
    // Không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  // (Tùy chọn) Xác minh một giao dịch chung
  rpc VerifyTransaction(VerifyTransactionRequest) returns (VerifyTransactionResponse);

  // (Tùy chọn) Phân tích logs của một giao dịch để lấy thông tin chi tiết
  rpc ParseTransactionLogs(ParseTransactionLogsRequest) returns (ParseTransactionLogsResponse);

  rpc VerifyTokenOwnership(VerifyTokenOwnershipRequest) returns (VerifyTokenOwnershipResponse);

 // ✅ NEW: Platform fee management
  rpc SetPlatformFee(SetPlatformFeeRequest) returns (SetPlatformFeeResponse) {
    option (google.api.http) = {
      post: "/v1/admin/platform/fee"
      body: "*"
    };
  }
  
  rpc GetPlatformFee(GetPlatformFeeRequest) returns (GetPlatformFeeResponse) {
    option (google.api.http) = {
      get: "/v1/admin/platform/fee"
    };
  }

  // ✅ NEW: Revenue management
  rpc GetEventRevenue(GetEventRevenueRequest) returns (GetEventRevenueResponse) {
    option (google.api.http) = {
      get: "/v1/admin/events/{blockchain_event_id}/revenue"
    };
  }

  rpc SettleEventRevenue(SettleEventRevenueRequest) returns (SettleEventRevenueResponse) {
    option (google.api.http) = {
      post: "/v1/admin/events/{blockchain_event_id}/settle"
      body: "*"
    };
  }

  rpc WithdrawPlatformFees(WithdrawPlatformFeesRequest) returns (WithdrawPlatformFeesResponse) {
    option (google.api.http) = {
      post: "/v1/admin/platform/withdraw"
      body: "*"
    };
  }

  // ✅ NEW: Get contract balance
  rpc GetContractBalance(GetContractBalanceRequest) returns (GetContractBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/admin/platform/balance"
    };
  }

  // Check ticket type availability on contract
  rpc CheckTicketTypeAvailability(CheckTicketTypeAvailabilityRequest) returns (CheckTicketTypeAvailabilityResponse);

  // Check if purchase is possible for multiple ticket types
  rpc CheckPurchaseAvailability(CheckPurchaseAvailabilityRequest) returns (CheckPurchaseAvailabilityResponse);

  // Sync availability from contract to database
  rpc SyncTicketTypeAvailability(SyncTicketTypeAvailabilityRequest) returns (SyncTicketTypeAvailabilityResponse);
}

// ----- Messages -----
message RegisterEventOnBlockchainResponse {
  bool success = 1;
  string transaction_hash = 2;
  string actual_blockchain_event_id = 3; // ID sự kiện thực tế trên blockchain (uint256, dạng string)
}

message GetTicketPaymentDetailsRequest {
  string blockchain_event_id = 1; // ID của sự kiện trên contract (uint256, dạng string)
  // string ticket_type_id = 2; // Hoặc ID loại vé để lấy giá đúng (tùy theo logic của bạn)
  string price_wei_from_ticket_type = 3; // Giá vé từ TicketType (dạng chuỗi Wei)
                                         // Blockchain service có thể tự query giá từ contract nếu cần
}

message GetTicketPaymentDetailsResponse {
  string payment_contract_address = 1; // Địa chỉ của EventTicketNFT contract
  string price_to_pay_wei = 2;         // Số tiền Wei người dùng cần trả (lấy từ contract hoặc TicketType)
  // uint32 chain_id = 3; // Chain ID, nếu cần cho frontend
}

message MintTicketRequest {
  string buyer_address = 1;
  string token_uri_cid = 2;
  string blockchain_ticket_type_id = 3; // ✅ CHANGE: Use ticket type ID
  string session_id_for_contract = 4;
}

message MintTicketResponse {
  bool success = 1;
  string token_id = 2;            // ID của NFT đã được mint (uint256, dạng string)
  string transaction_hash = 3;
  string owner_address = 4;       // Địa chỉ người sở hữu thực tế sau khi mint
}

message VerifyTransactionRequest {
  string transaction_hash = 1;
}

message VerifyTransactionResponse {
  bool is_confirmed = 1;
  bool success_on_chain = 2; // Giao dịch có thành công trên blockchain không (status 0x1)
  string from_address = 3;
  string to_address = 4;
  string value_wei = 5;
  uint64 block_number = 6;
  // Thêm các thông tin khác từ giao dịch nếu cần
}

message ParseTransactionLogsRequest {
  string transaction_hash = 1;
}

message ParseTransactionLogsResponse {
  bool success = 1;
  string minted_token_id = 2;
  repeated string minted_token_ids = 3; 
  string event_id = 4;
  string session_id = 5;
}

// ✅ NEW: Messages for ticket type registration
message RegisterTicketTypeOnBlockchainRequest {
  string blockchain_event_id = 1;
  string ticket_type_name = 2;
  string price_wei = 3;
  string total_supply = 4;
}

message RegisterTicketTypeOnBlockchainResponse {
  bool success = 1;
  string transaction_hash = 2;
  string blockchain_ticket_type_id = 3;
}

// ✅ FIX: Update RegisterEventOnBlockchain (remove price/supply)
message RegisterEventOnBlockchainRequest {
  string system_event_id_for_ref = 1;
  string blockchain_event_id = 2;
  string event_name = 3; // ✅ ADD: Event name
  string organizer_address = 4; // ✅ NEW: Organizer wallet address
}

// ✅ NEW: Messages for ownership verification
message VerifyTokenOwnershipRequest {
  string token_id = 1;
  string expected_owner = 2;
}

message VerifyTokenOwnershipResponse {
  bool is_valid_owner = 1;
  string actual_owner = 2;
  string expected_owner = 3;
  string reason = 4;
}

message SettleEventRevenueRequest {
  string blockchain_event_id = 1;
  bool force_settlement = 2; // ✅ NEW: Admin override for emergency cases
  string admin_reason = 3;   // ✅ NEW: Reason for forced settlement
}

message SettleEventRevenueResponse {
  bool success = 1;
  string transaction_hash = 2;
  string organizer_amount_wei = 3;
  string platform_fee_wei = 4;
  string organizer_address = 5;
  string event_name = 6;           // ✅ NEW: Event name for confirmation
  int64 event_end_time = 7;        // ✅ NEW: When the event actually ended
  int64 settlement_time = 8;       // ✅ NEW: When settlement occurred
}

message WithdrawPlatformFeesRequest {
  string amount_wei = 1;
}

message WithdrawPlatformFeesResponse {
  bool success = 1;
  string transaction_hash = 2;
  string amount_wei = 3;
}

message GetEventRevenueRequest {
  string blockchain_event_id = 1;
}

message GetEventRevenueResponse {
  string organizer_revenue_wei = 1;
  string platform_fees_wei = 2;
  bool settled = 3;
  string organizer_address = 4;
}

// ✅ NEW: Platform fee management messages
message SetPlatformFeeRequest {
  uint32 fee_percent = 1; // 0-30%
}

message SetPlatformFeeResponse {
  bool success = 1;
  string transaction_hash = 2;
  uint32 old_fee_percent = 3;
  uint32 new_fee_percent = 4;
}

message GetPlatformFeeRequest {
  // Empty - just get current fee
}

message GetPlatformFeeResponse {
  uint32 fee_percent = 1;
  uint32 max_fee_percent = 2;
}

// ✅ NEW: Contract balance messages
message GetContractBalanceRequest {
  // Empty request
}

message GetContractBalanceResponse {
  string contract_balance_wei = 1;
  string total_platform_fees_wei = 2;
  uint32 platform_fee_percent = 3;
}

// ✅ NEW: Availability checking messages
message CheckTicketTypeAvailabilityRequest {
  string blockchain_ticket_type_id = 1;
}

message CheckTicketTypeAvailabilityResponse {
  string blockchain_ticket_type_id = 1;
  uint32 remaining_quantity = 2;
  string price_wei = 3;
  string name = 4;
  bool exists = 5;
}

message CheckPurchaseAvailabilityRequest {
  repeated string ticket_type_ids = 1;
  repeated uint32 quantities = 2;
}

message CheckPurchaseAvailabilityResponse {
  bool can_purchase = 1;
  string reason = 2;
  int64 checked_at = 3;
}

message SyncTicketTypeAvailabilityRequest {
  string blockchain_ticket_type_id = 1;
}

message SyncTicketTypeAvailabilityResponse {
  string blockchain_ticket_type_id = 1;
  uint32 contract_remaining = 2;
  string contract_price_wei = 3;
  string contract_name = 4;
  int64 synced_at = 5;
}