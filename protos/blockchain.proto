syntax = "proto3";

package blockchain;

import "google/api/annotations.proto";

// ----- BlockchainService -----
service BlockchainService {
  // Được gọi bởi EventService khi tạo sự kiện mới trong hệ thống
  rpc RegisterEventOnBlockchain(RegisterEventOnBlockchainRequest) returns (RegisterEventOnBlockchainResponse) {
    // Endpoint này có thể không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  rpc RegisterTicketTypeOnBlockchain(RegisterTicketTypeOnBlockchainRequest) returns (RegisterTicketTypeOnBlockchainResponse);

  // Được gọi bởi TicketService để lấy thông tin cần thiết cho việc thanh toán
  rpc GetTicketPaymentDetails(GetTicketPaymentDetailsRequest) returns (GetTicketPaymentDetailsResponse) {
    // Không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  // Được gọi bởi TicketService (hoặc một quy trình backend khác) để mint vé NFT
  // sau khi các điều kiện (ví dụ: thanh toán) đã được xác nhận.
  rpc MintTicket(MintTicketRequest) returns (MintTicketResponse) {
    // Không cần expose qua Kong nếu chỉ gọi nội bộ
  }

  // (Tùy chọn) Xác minh một giao dịch chung
  rpc VerifyTransaction(VerifyTransactionRequest) returns (VerifyTransactionResponse);

  // (Tùy chọn) Phân tích logs của một giao dịch để lấy thông tin chi tiết
  rpc ParseTransactionLogs(ParseTransactionLogsRequest) returns (ParseTransactionLogsResponse);
}

// ----- Messages -----
message RegisterEventOnBlockchainResponse {
  bool success = 1;
  string transaction_hash = 2;
  string actual_blockchain_event_id = 3; // ID sự kiện thực tế trên blockchain (uint256, dạng string)
}

message GetTicketPaymentDetailsRequest {
  string blockchain_event_id = 1; // ID của sự kiện trên contract (uint256, dạng string)
  // string ticket_type_id = 2; // Hoặc ID loại vé để lấy giá đúng (tùy theo logic của bạn)
  string price_wei_from_ticket_type = 3; // Giá vé từ TicketType (dạng chuỗi Wei)
                                         // Blockchain service có thể tự query giá từ contract nếu cần
}

message GetTicketPaymentDetailsResponse {
  string payment_contract_address = 1; // Địa chỉ của EventTicketNFT contract
  string price_to_pay_wei = 2;         // Số tiền Wei người dùng cần trả (lấy từ contract hoặc TicketType)
  // uint32 chain_id = 3; // Chain ID, nếu cần cho frontend
}

message MintTicketRequest {
  string buyer_address = 1;
  string token_uri_cid = 2;
  string blockchain_ticket_type_id = 3; // ✅ CHANGE: Use ticket type ID
  string session_id_for_contract = 4;
}

message MintTicketResponse {
  bool success = 1;
  string token_id = 2;            // ID của NFT đã được mint (uint256, dạng string)
  string transaction_hash = 3;
  string owner_address = 4;       // Địa chỉ người sở hữu thực tế sau khi mint
}

message VerifyTransactionRequest {
  string transaction_hash = 1;
}

message VerifyTransactionResponse {
  bool is_confirmed = 1;
  bool success_on_chain = 2; // Giao dịch có thành công trên blockchain không (status 0x1)
  string from_address = 3;
  string to_address = 4;
  string value_wei = 5;
  uint64 block_number = 6;
  // Thêm các thông tin khác từ giao dịch nếu cần
}

message ParseTransactionLogsRequest {
  string transaction_hash = 1;
}

message ParseTransactionLogsResponse {
  bool success = 1;
  string minted_token_id = 2;
  string event_id = 3;
  string session_id = 4;
}

// ✅ NEW: Messages for ticket type registration
message RegisterTicketTypeOnBlockchainRequest {
  string blockchain_event_id = 1;
  string ticket_type_name = 2;
  string price_wei = 3;
  string total_supply = 4;
}

message RegisterTicketTypeOnBlockchainResponse {
  bool success = 1;
  string transaction_hash = 2;
  string blockchain_ticket_type_id = 3;
}

// ✅ FIX: Update RegisterEventOnBlockchain (remove price/supply)
message RegisterEventOnBlockchainRequest {
  string system_event_id_for_ref = 1;
  string blockchain_event_id = 2;
  string event_name = 3; // ✅ ADD: Event name
}