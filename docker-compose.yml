services:
  consul:
    image: hashicorp/consul:1.18
    container_name: consul_service_discovery
    ports:
      - "8500:8500"
      - "8600:8600/udp"
      - "8600:8600/tcp"
    command: "agent -server -ui -client=0.0.0.0 -bootstrap-expect=1" # Giữ nguyên command của bạn
    networks:
      microservices_network:
        ipv4_address: 172.23.0.2
    healthcheck: # Consul có healthcheck riêng trong Docker Compose
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  ipfs-service: # Service số 8
    build:
      context: .
      dockerfile: ./services/08-ipfs-service/Dockerfile
    container_name: ipfs_service
    env_file:
      - ./services/08-ipfs-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy # ipfs-service phụ thuộc Consul healthy

  blockchain-service: # Service số 6
    build:
      context: .
      dockerfile: ./services/06-blockchain-service/Dockerfile
    container_name: blockchain_service
    env_file:
      - ./services/06-blockchain-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy # blockchain-service phụ thuộc Consul healthy

  auth-service: # Service số 2
    build:
      context: .
      dockerfile: ./services/02-auth-service/Dockerfile
    container_name: auth_service
    env_file:
      - ./services/02-auth-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy # auth-service phụ thuộc Consul healthy
      # user-service: # Nếu auth-service có gọi user-service lúc khởi tạo (ít khi)
      #   condition: service_started

  user-service: # Service số 3
    build:
      context: .
      dockerfile: ./services/03-user-service/Dockerfile
    container_name: user_service
    env_file:
      - ./services/03-user-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy # user-service phụ thuộc Consul healthy
      # auth-service: # Nếu user-service có gọi auth-service lúc khởi tạo (ít khi)
      #   condition: service_started

  event-service: # Service số 4
    build:
      context: .
      dockerfile: ./services/04-event-service/Dockerfile
    container_name: event_service
    env_file:
      - ./services/04-event-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy
      ipfs-service:
        condition: service_started # Chờ ipfs-service container bắt đầu
      blockchain-service:
        condition: service_started # Chờ blockchain-service container bắt đầu
      # auth-service: # Nếu cần xác thực organizer lúc event-service khởi tạo
      #   condition: service_started

  ticket-service: # Service số 5
    build:
      context: .
      dockerfile: ./services/05-ticket-service/Dockerfile
    container_name: ticket_service
    env_file:
      - ./services/05-ticket-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy
      event-service:
        condition: service_started # Chờ event-service container bắt đầu
      ipfs-service:
        condition: service_started # Chờ ipfs-service container bắt đầu
      blockchain-service:
        condition: service_started # Chờ blockchain-service container bắt đầu
      # auth-service: # Nếu cần xác thực người mua lúc ticket-service khởi tạo
      #   condition: service_started
      # user-service: # Nếu cần thông tin người mua lúc ticket-service khởi tạo
      #   condition: service_started

  seatmap-service: # Service số 7
    build:
      context: .
      dockerfile: ./services/07-seatmap-service/Dockerfile
    container_name: seatmap_service
    env_file:
      - ./services/07-seatmap-service/.env
    dns: ["172.23.0.2", "8.8.8.8", "1.1.1.1"]
    networks:
      - microservices_network
    depends_on:
      consul:
        condition: service_healthy
      event-service:
        condition: service_started # Chờ event-service container bắt đầu
      # auth-service: # Nếu cần xác thực người mua lúc ticket-service khởi tạo
      #   condition: service_started
      # user-service: # Nếu cần thông tin người mua lúc ticket-service khởi tạo
      #   condition: service_started

  kong-gateway-infra:
    image: kong:3.7
    container_name: kong_api_gateway_infra
    user: root
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yaml
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PLUGINS: bundled,grpc-gateway,jwt
      KONG_LOG_LEVEL: debug
      KONG_TRUSTED_IPS: "0.0.0.0/0"
      KONG_SHARED_JWT_SECRET: ${KONG_SHARED_JWT_SECRET}
      KONG_DNS_RESOLVER: '172.23.0.2:8600'
      KONG_DNS_ORDER: 'LAST,SRV,A,CNAME'
    dns:
      - "172.23.0.2"
      - "8.8.8.8"
      - "1.1.1.1"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
    volumes:
      - ./kong_config/kong.yaml:/etc/kong/kong.yaml:ro
      - ./protos:/etc/kong/protos:ro
    networks:
      - microservices_network
    depends_on: # Kong phụ thuộc vào tất cả các service và Consul
      consul:
        condition: service_healthy # Chờ Consul healthy
      auth-service:
        condition: service_started # Chờ container auth-service bắt đầu
      user-service:
        condition: service_started # Chờ container user-service bắt đầu
      ipfs-service:
        condition: service_started # Chờ container ipfs-service bắt đầu
      event-service:
        condition: service_started # Chờ container event-service bắt đầu
      ticket-service:
        condition: service_started # Chờ container ticket-service bắt đầu
      blockchain-service:
        condition: service_started # Chờ container blockchain-service bắt đầu
      seatmap-service:
        condition: service_started # Chờ container seatmap-service bắt đầu

networks:
  microservices_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.23.0.0/16"